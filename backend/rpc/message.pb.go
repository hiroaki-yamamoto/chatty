// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderName           string               `protobuf:"bytes,2,opt,name=senderName,proto3" json:"senderName,omitempty"`
	PostTime             *timestamp.Timestamp `protobuf:"bytes,3,opt,name=postTime,proto3" json:"postTime,omitempty"`
	Profile              string               `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	Message              string               `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message) GetSenderName() string {
	if m != nil {
		return m.SenderName
	}
	return ""
}

func (m *Message) GetPostTime() *timestamp.Timestamp {
	if m != nil {
		return m.PostTime
	}
	return nil
}

func (m *Message) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type MessageRequest struct {
	TopicId              string   `protobuf:"bytes,1,opt,name=topicId,proto3" json:"topicId,omitempty"`
	StartFrom            uint32   `protobuf:"varint,2,opt,name=startFrom,proto3" json:"startFrom,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageRequest) Reset()         { *m = MessageRequest{} }
func (m *MessageRequest) String() string { return proto.CompactTextString(m) }
func (*MessageRequest) ProtoMessage()    {}
func (*MessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

func (m *MessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageRequest.Unmarshal(m, b)
}
func (m *MessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageRequest.Marshal(b, m, deterministic)
}
func (m *MessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageRequest.Merge(m, src)
}
func (m *MessageRequest) XXX_Size() int {
	return xxx_messageInfo_MessageRequest.Size(m)
}
func (m *MessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MessageRequest proto.InternalMessageInfo

func (m *MessageRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *MessageRequest) GetStartFrom() uint32 {
	if m != nil {
		return m.StartFrom
	}
	return 0
}

type PostRequest struct {
	TopicId              string   `protobuf:"bytes,1,opt,name=topicId,proto3" json:"topicId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NoDump               bool     `protobuf:"varint,3,opt,name=noDump,proto3" json:"noDump,omitempty"`
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Recaptcha            string   `protobuf:"bytes,5,opt,name=recaptcha,proto3" json:"recaptcha,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostRequest) Reset()         { *m = PostRequest{} }
func (m *PostRequest) String() string { return proto.CompactTextString(m) }
func (*PostRequest) ProtoMessage()    {}
func (*PostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}

func (m *PostRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostRequest.Unmarshal(m, b)
}
func (m *PostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostRequest.Marshal(b, m, deterministic)
}
func (m *PostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostRequest.Merge(m, src)
}
func (m *PostRequest) XXX_Size() int {
	return xxx_messageInfo_PostRequest.Size(m)
}
func (m *PostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostRequest proto.InternalMessageInfo

func (m *PostRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *PostRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PostRequest) GetNoDump() bool {
	if m != nil {
		return m.NoDump
	}
	return false
}

func (m *PostRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PostRequest) GetRecaptcha() string {
	if m != nil {
		return m.Recaptcha
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*MessageRequest)(nil), "MessageRequest")
	proto.RegisterType((*PostRequest)(nil), "PostRequest")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcb, 0x4e, 0xc3, 0x30,
	0x10, 0x45, 0x95, 0x36, 0x7d, 0x4d, 0x1f, 0x48, 0x5e, 0xa0, 0x28, 0xe2, 0x51, 0x75, 0xd5, 0x95,
	0x8b, 0x8a, 0xc4, 0x07, 0x20, 0x84, 0x60, 0x01, 0x42, 0x69, 0x37, 0xb0, 0x73, 0xd2, 0x69, 0xb1,
	0x54, 0xd7, 0xc6, 0x9e, 0xf0, 0x13, 0x7c, 0x07, 0xff, 0x89, 0xe2, 0x24, 0x7d, 0xac, 0xd8, 0xf9,
	0x5e, 0x8f, 0xe6, 0xde, 0xa3, 0x81, 0xa1, 0x42, 0xe7, 0xc4, 0x06, 0xb9, 0xb1, 0x9a, 0x74, 0x7c,
	0xbd, 0xd1, 0x7a, 0xb3, 0xc5, 0x99, 0x57, 0x69, 0xbe, 0x9e, 0x91, 0x54, 0xe8, 0x48, 0x28, 0x53,
	0x0d, 0x0c, 0x1c, 0x09, 0xca, 0x5d, 0xa9, 0x26, 0xbf, 0x01, 0x74, 0x5e, 0xca, 0x05, 0x6c, 0x04,
	0x0d, 0xb9, 0x8a, 0x82, 0x71, 0x30, 0xed, 0x25, 0x0d, 0xb9, 0x62, 0x57, 0x00, 0x0e, 0x77, 0x2b,
	0xb4, 0xaf, 0x42, 0x61, 0xd4, 0xf0, 0xfe, 0x91, 0xc3, 0xee, 0xa0, 0x6b, 0xb4, 0xa3, 0xa5, 0x54,
	0x18, 0x35, 0xc7, 0xc1, 0xb4, 0x3f, 0x8f, 0x79, 0x99, 0xce, 0xeb, 0x74, 0xbe, 0xac, 0xd3, 0x93,
	0xfd, 0x2c, 0x8b, 0xa0, 0x63, 0xac, 0x5e, 0xcb, 0x2d, 0x46, 0xa1, 0x5f, 0x5a, 0xcb, 0xe2, 0xa7,
	0xa2, 0x89, 0x5a, 0xe5, 0x4f, 0x25, 0x27, 0x4f, 0x30, 0xaa, 0x6a, 0x26, 0xf8, 0x95, 0xa3, 0xa3,
	0x62, 0x96, 0xb4, 0x91, 0xd9, 0x73, 0x5d, 0xb9, 0x96, 0xec, 0x02, 0x7a, 0x8e, 0x84, 0xa5, 0x47,
	0xab, 0x95, 0xaf, 0x3d, 0x4c, 0x0e, 0xc6, 0xe4, 0x27, 0x80, 0xfe, 0x9b, 0x76, 0xf4, 0xff, 0x1e,
	0x06, 0xe1, 0xee, 0x40, 0xee, 0xdf, 0xec, 0x1c, 0xda, 0x3b, 0xfd, 0x90, 0x2b, 0xe3, 0x89, 0xbb,
	0x49, 0xa5, 0x8e, 0x9b, 0x87, 0x27, 0xcd, 0x8b, 0x36, 0x16, 0x33, 0x61, 0x28, 0xfb, 0x14, 0x15,
	0xd5, 0xc1, 0x98, 0xbf, 0xef, 0xb9, 0x16, 0x68, 0xbf, 0x65, 0x86, 0x6c, 0x0a, 0xbd, 0x45, 0x9e,
	0xba, 0xcc, 0xca, 0x14, 0xd9, 0x19, 0x3f, 0xa5, 0x8e, 0xbb, 0xb5, 0x71, 0x13, 0xb0, 0x4b, 0x08,
	0x0b, 0x10, 0x36, 0xe0, 0x47, 0x3c, 0x71, 0x87, 0x2f, 0xfc, 0x81, 0xef, 0x5b, 0x1f, 0x4d, 0x6b,
	0xb2, 0xb4, 0xed, 0x6f, 0x71, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x41, 0x91, 0x03, 0x6c, 0x28,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageServiceClient interface {
	Subscribe(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (MessageService_SubscribeClient, error)
	Post(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Status, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) Subscribe(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (MessageService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageService_serviceDesc.Streams[0], "/MessageService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *messageServiceSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) Post(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MessageService/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
type MessageServiceServer interface {
	Subscribe(*MessageRequest, MessageService_SubscribeServer) error
	Post(context.Context, *PostRequest) (*Status, error)
}

// UnimplementedMessageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (*UnimplementedMessageServiceServer) Subscribe(req *MessageRequest, srv MessageService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedMessageServiceServer) Post(ctx context.Context, req *PostRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).Subscribe(m, &messageServiceSubscribeServer{stream})
}

type MessageService_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messageServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *messageServiceSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageService_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessageService/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Post(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Post",
			Handler:    _MessageService_Post_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MessageService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
