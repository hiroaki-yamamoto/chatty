// Code generated by protoc-gen-go. DO NOT EDIT.
// source: topic.proto

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TopicInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	NumReplies           uint32   `protobuf:"varint,3,opt,name=numReplies,proto3" json:"numReplies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicInfo) Reset()         { *m = TopicInfo{} }
func (m *TopicInfo) String() string { return proto.CompactTextString(m) }
func (*TopicInfo) ProtoMessage()    {}
func (*TopicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7312ad0e4fa171e8, []int{0}
}

func (m *TopicInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicInfo.Unmarshal(m, b)
}
func (m *TopicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicInfo.Marshal(b, m, deterministic)
}
func (m *TopicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicInfo.Merge(m, src)
}
func (m *TopicInfo) XXX_Size() int {
	return xxx_messageInfo_TopicInfo.Size(m)
}
func (m *TopicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TopicInfo proto.InternalMessageInfo

func (m *TopicInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TopicInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TopicInfo) GetNumReplies() uint32 {
	if m != nil {
		return m.NumReplies
	}
	return 0
}

type TopicRequest struct {
	BoardId              string   `protobuf:"bytes,1,opt,name=boardId,proto3" json:"boardId,omitempty"`
	StartFrom            uint32   `protobuf:"varint,2,opt,name=startFrom,proto3" json:"startFrom,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicRequest) Reset()         { *m = TopicRequest{} }
func (m *TopicRequest) String() string { return proto.CompactTextString(m) }
func (*TopicRequest) ProtoMessage()    {}
func (*TopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7312ad0e4fa171e8, []int{1}
}

func (m *TopicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicRequest.Unmarshal(m, b)
}
func (m *TopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicRequest.Marshal(b, m, deterministic)
}
func (m *TopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicRequest.Merge(m, src)
}
func (m *TopicRequest) XXX_Size() int {
	return xxx_messageInfo_TopicRequest.Size(m)
}
func (m *TopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopicRequest proto.InternalMessageInfo

func (m *TopicRequest) GetBoardId() string {
	if m != nil {
		return m.BoardId
	}
	return ""
}

func (m *TopicRequest) GetStartFrom() uint32 {
	if m != nil {
		return m.StartFrom
	}
	return 0
}

func init() {
	proto.RegisterType((*TopicInfo)(nil), "TopicInfo")
	proto.RegisterType((*TopicRequest)(nil), "TopicRequest")
}

func init() { proto.RegisterFile("topic.proto", fileDescriptor_7312ad0e4fa171e8) }

var fileDescriptor_7312ad0e4fa171e8 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x3d, 0xaf, 0x82, 0x30,
	0x18, 0x46, 0x53, 0x6e, 0xe0, 0x5e, 0xde, 0x2b, 0x0e, 0x8d, 0x43, 0x63, 0x8c, 0x21, 0xc4, 0x81,
	0x89, 0x18, 0xf5, 0x17, 0x38, 0x90, 0x30, 0x5a, 0x9d, 0xdc, 0xf8, 0x78, 0x4d, 0x9a, 0x00, 0xc5,
	0xb6, 0xf0, 0xfb, 0x8d, 0x55, 0x94, 0xf1, 0x9c, 0xe1, 0x3c, 0x79, 0xe0, 0xdf, 0xc8, 0x4e, 0x94,
	0x49, 0xa7, 0xa4, 0x91, 0xd1, 0x09, 0xfc, 0xcb, 0x13, 0xb3, 0xf6, 0x26, 0xe9, 0x1c, 0x1c, 0x51,
	0x31, 0x12, 0x92, 0xd8, 0xe7, 0x8e, 0xa8, 0xe8, 0x02, 0x5c, 0x23, 0x4c, 0x8d, 0xcc, 0xb1, 0xea,
	0x05, 0x74, 0x0d, 0xd0, 0xf6, 0x0d, 0xc7, 0xae, 0x16, 0xa8, 0xd9, 0x4f, 0x48, 0xe2, 0x80, 0x4f,
	0x4c, 0x94, 0xc2, 0xcc, 0x26, 0x39, 0xde, 0x7b, 0xd4, 0x86, 0x32, 0xf8, 0x2d, 0x64, 0xae, 0xaa,
	0x6c, 0x4c, 0x8f, 0x48, 0x57, 0xe0, 0x6b, 0x93, 0x2b, 0x93, 0x2a, 0xd9, 0xd8, 0x8d, 0x80, 0x7f,
	0xc5, 0xee, 0xf0, 0xee, 0x9c, 0x51, 0x0d, 0xa2, 0x44, 0xba, 0x01, 0xd7, 0x32, 0x0d, 0x92, 0x69,
	0x7f, 0x09, 0xc9, 0xe7, 0xc1, 0x96, 0x1c, 0xff, 0xae, 0x9e, 0x46, 0x35, 0xa0, 0x2a, 0x3c, 0xfb,
	0x70, 0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x60, 0x30, 0x75, 0xf0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TopicServiceClient is the client API for TopicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TopicServiceClient interface {
	Topic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (TopicService_TopicClient, error)
}

type topicServiceClient struct {
	cc *grpc.ClientConn
}

func NewTopicServiceClient(cc *grpc.ClientConn) TopicServiceClient {
	return &topicServiceClient{cc}
}

func (c *topicServiceClient) Topic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (TopicService_TopicClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TopicService_serviceDesc.Streams[0], "/TopicService/Topic", opts...)
	if err != nil {
		return nil, err
	}
	x := &topicServiceTopicClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TopicService_TopicClient interface {
	Recv() (*TopicInfo, error)
	grpc.ClientStream
}

type topicServiceTopicClient struct {
	grpc.ClientStream
}

func (x *topicServiceTopicClient) Recv() (*TopicInfo, error) {
	m := new(TopicInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TopicServiceServer is the server API for TopicService service.
type TopicServiceServer interface {
	Topic(*TopicRequest, TopicService_TopicServer) error
}

// UnimplementedTopicServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTopicServiceServer struct {
}

func (*UnimplementedTopicServiceServer) Topic(req *TopicRequest, srv TopicService_TopicServer) error {
	return status.Errorf(codes.Unimplemented, "method Topic not implemented")
}

func RegisterTopicServiceServer(s *grpc.Server, srv TopicServiceServer) {
	s.RegisterService(&_TopicService_serviceDesc, srv)
}

func _TopicService_Topic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopicRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopicServiceServer).Topic(m, &topicServiceTopicServer{stream})
}

type TopicService_TopicServer interface {
	Send(*TopicInfo) error
	grpc.ServerStream
}

type topicServiceTopicServer struct {
	grpc.ServerStream
}

func (x *topicServiceTopicServer) Send(m *TopicInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _TopicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TopicService",
	HandlerType: (*TopicServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Topic",
			Handler:       _TopicService_Topic_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "topic.proto",
}
